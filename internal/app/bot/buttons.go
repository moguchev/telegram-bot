package bot

import "strconv"

type buttonText string

const (
	ButtonSettingsNotifications             = buttonText("üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
	ButtonSettingsNotificationsReviewsOn    = buttonText("üîî –í–∫–ª. —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–∑—ã–≤–∞—Ö")
	ButtonSettingsNotificationsReviewsOff   = buttonText("üîï –í—ã–∫–ª. —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–∑—ã–≤–∞—Ö")
	ButtonSettingsNotificationsQuestionsOn  = buttonText("üîî –í–∫–ª. —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–æ–ø—Ä–æ—Å–∞—Ö")
	ButtonSettingsNotificationsQuestionsOff = buttonText("üîï –í—ã–∫–ª. —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–æ–ø—Ä–æ—Å–∞—Ö")
)

var (
	CallbackText = map[callbackType]buttonText{
		SettingsNotifications: ButtonSettingsNotifications,
	}
)

func (ct callbackType) Data() string {
	return strconv.Itoa(int(ct))
}

func (ct callbackType) Text(args ...interface{}) string {
	switch ct {
	case SettingsNotificationsReviewsSwitch:
		if len(args) != 1 {
			return string(ButtonSettingsNotificationsReviewsOn)
		}
		st, ok := args[0].(bool)
		if !ok {
			return string(ButtonSettingsNotificationsReviewsOn)
		}
		if st {
			return string(ButtonSettingsNotificationsReviewsOff)
		}
		return string(ButtonSettingsNotificationsReviewsOn)
	case SettingsNotificationsQuestionsSwitch:
		if len(args) != 1 {
			return string(ButtonSettingsNotificationsQuestionsOn)
		}
		st, ok := args[0].(bool)
		if !ok {
			return string(ButtonSettingsNotificationsQuestionsOn)
		}
		if st {
			return string(ButtonSettingsNotificationsQuestionsOff)
		}
		return string(ButtonSettingsNotificationsQuestionsOn)
	default:
		return string(CallbackText[ct])
	}
}
